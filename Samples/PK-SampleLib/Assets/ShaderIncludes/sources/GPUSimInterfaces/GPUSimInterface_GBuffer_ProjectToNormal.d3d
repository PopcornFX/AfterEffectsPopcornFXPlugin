//----------------------------------------------------------------------------
//
//		_pksi_GBuffer_ProjectToNormal
//
//----------------------------------------------------------------------------

// PK-SampleLib rendering normal unpack function
float3	UnpackNormalSpheremap(float2 normal)
{
	float2	fenc = normal * 4.0f - 2.0f;
	float	f = dot(fenc, fenc);
	float	g = sqrt(1.0f - f / 4.0f);
	float3	outNormal;

	outNormal.xy = fenc * g;
	outNormal.z = 1.0f - f / 2.0f;
	return mul(UnpackNormalView, float4(outNormal, 0.0f)).xyz;
}

//----------------------------------------------------------------------------

// Outputs the GBuffer normal value at projected world position
float3	Ext__pksi_GBuffer_ProjectToNormal_f32x3_CX(float3 position, inout int4 sceneCtx)
{
	float4	clipPosition = mul(ViewProj, float4(position, 1.0f));
	float2	screenPosition = clipPosition.xy / clipPosition.w;
	float2	screenUV = screenPosition * 0.5f + 0.5f;

	// Return zero normal if input position is outside of view:
	// branching below could also be removed by changing SceneTexturesSampler's addressing mode to TEXTURE_ADDRESS_MODE_BORDER and having a zero border color
	float3	worldNormal = float3(0.0f, 0.0f, 0.0f);
	if (all(abs(screenPosition.xy) <= float2(1, 1)))
	{
		float4	packedNormalRoughMetal = SceneNormal.SampleLevel(SceneTexturesSampler, screenUV, 0);
		worldNormal = UnpackNormalSpheremap(packedNormalRoughMetal.rg);
	}
	return worldNormal;
}

//----------------------------------------------------------------------------